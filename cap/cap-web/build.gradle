apply plugin: 'war'

dependencies {
	compile project(':cap-action')
    compile group: 'commons-io', name: 'commons-io', version: '1.4'
    compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
    providedCompile "javax.servlet:servlet-api:2.5"
}

eclipse {
  	wtp {
	    component {
	      //for examples see docs for EclipseWtpComponent
	      contextPath = "capWeb-contextPath"
	      deployName = 'capWeb-deployName'
	      //libConfigurations = [project(':cap-action').configurations.runtime,project(':cap-fileload').configurations.runtime]
	    }

	    facet {
	      //for examples see docs for EclipseWtpFacet
	    }
  	}
	project {
		//linkedResource name: 'fileload-java', type: '2', location: project(':cap-fileload').projectDir.path + '/src/main/java'
	}

  	classpath {
    	//defaultOutputDir = file("$webAppDirName/WEB-INF/classes")
    	file {
  			//if you want to mess with the resulting XML in whatever way you fancy
	  		withXml {
	    		def node = it.asNode()
	    		//kind="src" path="fileload-java"
	    		//node.appendNode('classpathentry', [kind: 'src', path: 'fileload-java'])
	    		
	  		}
  		}
	}
	
}

task copyAllDependencies(type: Copy) {
	//referring to the 'compile' configuration
	from configurations.compile
	into "$webAppDirName/WEB-INF/lib"
}

task sysout << {
	println sourceSets.class
	//println projectDir
    //println webAppDir
    //println webAppDirName
}

task listJars << {
	println '编译环境的jar列表：'
    configurations.compile.each { File file -> println file.name }
    
    println '测试编译环境的jar列表：'
    configurations.testCompile.each { File file -> println file.name }
}