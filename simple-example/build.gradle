defaultTasks 'dTask0','hello'   //不指定任何task时执行的task

//注意dependsOn的task名是字符串（由于所依赖的task定义在本方法的后面而非之前）
task count(dependsOn: 'hello') << {
    4.times {print "$it" }
}

//hello task
task hello << {
	println 'hello'
}

//注意该task没有<<，目前来看不管执行那个task 该task每次都会执行，感觉可能是配置
task myTask {
    println 'myTask execute.'
    ext.myName = "gradle"
}

//为方法增加多余的执行动作
hello.doFirst {
    println "before $hello.name task."
}

hello.doLast {
    println "after $hello.name task."
}

//注意该hello放的位子不同执行的顺序不同，在dolast之前那么会先于dolast之前执行
hello << {
    print 'hello again.'
    print " $myTask.myName"
}

//动态定义task
4.times  { index ->
    task "dTask$index" << {
        println "i am in task$index"
        //单引号里面是字符串，若想在字符串里面加入变量请使用双引号
        //println "i am in task$index" 和 println 'i am in task$index' 输出结果不一样，前者的$index会替换对应的属性值，后者不会
    }
}

dTask3.dependsOn dTask0,dTask1

//根据执行的不同任务设置不同变量
task distribution << {
    println "We build the zip with version=$version"
}

task release(dependsOn: 'distribution') << {
    println 'We release now'
}

//taskGraph应该是即将要执行的任务列表，通过判断要执行的任务列表里面是否有release来给version不同的值
gradle.taskGraph.whenReady {taskGraph ->
    println "i am in taskGraph whenReady"
    // println taskGraph
    if(taskGraph.hasTask(release)) {
        version = '1.0'
    }else {
        version = '1.0-SNAPSHOT'
    }
}

task printProject << {
    println project.dependencies
    println project.configurations
    println project.buildFile
    println project.artifacts
}

task ptFile << {
    println project.projectDir
    File readme = new File("$project.projectDir/README.md")
    def contextList = [];
    readme.eachLine("UTF-8"){ contextList.push(it) }
    contextList.each {
	println it
    }
}

//构建hotFix的配置信息
task createHotFixConfig(dependsOn: 'jar') << {
	File readme = new File("$rootProject.projectDir/hotFix.txt")
    copyClassHotFix.ext.hotFixFiles = []
    copyWebHotFix.ext.hotFixFiles = []
    //copyClassHotFix.ext.hotFixFiles = ['org/gradle/sample/Greeter.class','gradleCopy.xml']
	//copyWebHotFix.ext.hotFixFiles = ['WEB-INF/web.xml','index.jsp']
    readme.eachLine("UTF-8"){
    	it = it.replaceAll("\\\\", '/');
    	def javaFlag = '/src/main/java/'
    	def resourceFlag = '/src/main/resources/'
    	def webAppFlag = '/src/main/webapp/'
    	def index = it.indexOf(javaFlag)
    	if(index != -1) {
    		it = it.replaceAll('java$', 'class')
    		copyClassHotFix.ext.hotFixFiles << it.substring(index+javaFlag.length(), it.length())
    		//注意不能使用continue
    		return false
    	}
    	index = it.indexOf(resourceFlag)
    	if(index != -1) {
    		copyClassHotFix.ext.hotFixFiles << it.substring(index+resourceFlag.length(), it.length())
    		return false
    	}
    	index = it.indexOf(webAppFlag)
    	if(index != -1) {
    		copyWebHotFix.ext.hotFixFiles << it.substring(index+webAppFlag.length(), it.length())
    		return false
    	}
    	println "$index:$it"
    }
    //println copyClassHotFix.ext.hotFixFiles
    //println copyWebHotFix.ext.hotFixFiles
	
	//设置补丁（增量）生成的文件夹目录
	generateHotFix.ext.outDir = 'hotFix/'+ new Date().format('yyyy-MM-dd_HHmm')
	//先清理
	delete(generateHotFix.ext.outDir)
	//call task copyWebHotFix
	//tasks.copyWebHotFix.execute()
	//call task copyClassHotFix
	//tasks.copyClassHotFix.execute()
}

//注意：task 后面一定要有<<，不加<<的任务每次都是默认执行且是最先执行，<<应该是把任务加入到project的tasks中
//copy编译的class补丁（增量），包含resource目录下文件，对应项目src/main/java和src/main/resources
task copyClassHotFix(dependsOn: 'copyWebHotFix') << {
	println "classFile:$ext.hotFixFiles"
	//hasProperty
	if(!ext.hotFixFiles.empty) {
		copy {
			//class 目录
			from sourceSets.main.output.classesDir
			//resource 目录
			from sourceSets.main.output.resourcesDir
			into "$generateHotFix.ext.outDir/WEB-INF/classes"
			include ext.hotFixFiles
		}
	}
}

//copy编译的webapp补丁（增量），对应项目src/main/webapp
task copyWebHotFix(dependsOn:'createHotFixConfig') << {
	println "webFile:$ext.hotFixFiles"
	if(!ext.hotFixFiles.empty) {
		copy {
			//webApp目录
			from webAppDirName, {	
				exclude '**/classes'
				//exclude '**/lib'
			}
			into generateHotFix.ext.outDir
			include ext.hotFixFiles
		}
	}
}

//生成补丁（增量）文件，目前是需要将增量文件名列表拷贝到hotFix.txt中，后面考虑自己读取svn或git的提交记录
task generateHotFix(dependsOn:'copyClassHotFix') << {
	println 'generateHotFix'
}

