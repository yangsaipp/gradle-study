apply plugin: 'war'
//apply plugin: 'hotFix'

dependencies {
	compile project(':g-action')
    compile group: 'commons-io', name: 'commons-io', version: '1.4'
    compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
    providedCompile "javax.servlet:servlet-api:2.5"
}

hotFix {
	message = 'say:hotFix'
	greeter = 'web'
}

ext{
//	linkConfig = true
}

eclipse {
  	wtp {
	    component {
	      //for examples see docs for EclipseWtpComponent
	      contextPath = "capWeb-contextPath"
	      deployName = 'capWeb-deployName'
	      //libConfigurations = [project(':cap-action').configurations.runtime,project(':cap-fileload').configurations.runtime]
	    }

	    facet {
	      //for examples see docs for EclipseWtpFacet
	    }
  	}
	project {
		//linkedResource name: 'fileload-java', type: '2', location: project(':cap-fileload').projectDir.path + '/src/main/java'
		file {
		
			//closure executed after .classpath content is loaded from existing file
		  	//and after gradle build information is merged
		  	whenMerged { eProject ->
		  		//根据要配置的资源链接的信息[链接名,链接类型,链接的目录,链接的url]，构建Link对象并加入eclipse.project(领域配置对象)中去
		  		//对应 eclipse中工程属性中的 resource->link resources里面的配置
		  		if(eclipse.hasProperty("requireLinks")) {
					eclipse.ext.requireLinks.each{
						eProject.linkedResources << new org.gradle.plugins.ide.eclipse.model.Link(it.name, it.type, it.location, it.locationUri)
					}		  		
		  		}
		  	}
		}
	}
	
  	classpath {
  		//若配置linkConfig为true则生成eclipse相关link的配置
  		if(project.hasProperty("linkConfig") && project.ext.linkConfig) {
  			//set eclipse source default output dir
    		defaultOutputDir = file("$webAppDirName/WEB-INF/classes")
    		
    		file {
  				//if you want to mess with the resulting XML in whatever way you fancy
  				//定制化生成的.classpath文件内容
	  			withXml {
	  				def node = it.asNode()
	  				//找到<classpathentry kind="src" path="src/main/resources"/>
	  				def srcCP = node.find{it.@kind=='src' && it.@path=='src/main/resources'}
		    		/*
		    		* 用于存放需要配置的资源链接，对应 eclipse中工程属性中的 resource->link resources里面的配置
		    		* 注意点：
		    		*	1、requireLinks需要在classpath这里创建和加入信息，在上面project里面在去访问，这是由于eclipse插件执行顺序导致的，eclipse执行顺序如下
		    		*	:cap-web:eclipseClasspath
					*	:cap-web:eclipseJdt
					*	:cap-web:eclipseProject
		    		*	2、这里不能使用project.ext.requireLinks，若使用的话在上面project会获取不到，原因暂时不知道，可能是由于闭包导致的。
		    		*/
		    		eclipse.ext.requireLinks = []
		    		//过滤掉当前项目
		    		rootProject.subprojects.findAll{it != project}.each{
		    			//增加<classpathentry kind="src" path="cap-fileload"/>这样节点配置，对应 eclipse中工程属性中的 java build path里面的source的配置
		    			def projectName = it.name
		    			//增加同级节点
		    			srcCP.plus{
		    				classpathentry(kind: 'src', path: "$projectName-java")
		    				classpathentry(kind: 'src', path: "$projectName-resource")
		    			}
		    			//增加子节点
						//node.appendNode('classpathentry', [kind: 'src', path: it.name+'-java'])
						//node.appendNode('classpathentry', [kind: 'src', path: it.name+'-resource'])
						
						it.sourceSets.main.java.srcDirs.each { srcDir ->
							//加入要配置的资源链接的信息[链接名,链接类型,链接的目录,链接的url]，对应 eclipse中工程属性中的 resource->link resources里面的配置
							eclipse.ext.requireLinks << [name:"$it.name-java", type:'2', location:srcDir.path, locationUri: null]
						}
						it.sourceSets.main.resources.srcDirs.each { srcDir ->
							eclipse.ext.requireLinks << [name:"$it.name-resource", type:'2', location:srcDir.path, locationUri: null]
						}
					}
	  			}
	  		}
  		}
	}
}

task copyAllDependencies(type: Copy) {
	//referring to the 'compile' configuration
	from configurations.compile
	into "$webAppDirName/WEB-INF/lib"
}

//> gradle -q pingServer1
//Pinging: Server1
tasks.addRule("Pattern: ping<ID>") { String taskName ->
    if (taskName.startsWith("ping")) {
        task(taskName) << {
            println "Pinging: " + (taskName - 'ping')
        }
    }
}

//生成补丁（增量）文件，目前是需要将增量文件名列表拷贝到hotFix.txt中，后面考虑自己读取svn或git的提交记录
task generateHotFix(dependsOn:'copyClassHotFix') << {
	println 'generateHotFix'
}

//构建hotFix的配置信息
task createHotFixConfig(dependsOn: 'jar') << {
	File readme = new File("$rootProject.projectDir/hotFix.txt")
    copyClassHotFix.ext.hotFixFiles = []
    copyWebHotFix.ext.hotFixFiles = []
    //copyClassHotFix.ext.hotFixFiles = ['org/gradle/sample/Greeter.class','gradleCopy.xml']
	//copyWebHotFix.ext.hotFixFiles = ['WEB-INF/web.xml','index.jsp']
    readme.eachLine("UTF-8"){
    	it = it.replaceAll("\\\\", '/');
    	def javaFlag = '/src/main/java/'
    	def resourceFlag = '/src/main/resources/'
    	def webAppFlag = '/src/main/webapp/'
    	def index = it.indexOf(javaFlag)
    	if(index != -1) {
    		it = it.replaceAll('java$', 'class')
    		copyClassHotFix.ext.hotFixFiles << it.substring(index+javaFlag.length(), it.length())
    		//注意不能使用continue
    		return false
    	}
    	index = it.indexOf(resourceFlag)
    	if(index != -1) {
    		copyClassHotFix.ext.hotFixFiles << it.substring(index+resourceFlag.length(), it.length())
    		return false
    	}
    	index = it.indexOf(webAppFlag)
    	if(index != -1) {
    		copyWebHotFix.ext.hotFixFiles << it.substring(index+webAppFlag.length(), it.length())
    		return false
    	}
    	println "$index:$it"
    }
    //println copyClassHotFix.ext.hotFixFiles
    //println copyWebHotFix.ext.hotFixFiles
	
	//设置补丁（增量）生成的文件夹目录
	generateHotFix.ext.outDir = 'hotFix/'+ new Date().format('yyyy-MM-dd_HHmm')
	//先清理
	delete(generateHotFix.ext.outDir)
	//call task copyWebHotFix
	//tasks.copyWebHotFix.execute()
	//call task copyClassHotFix
	//tasks.copyClassHotFix.execute()
}

//注意：task 后面一定要有<<，不加<<的任务每次都是默认执行且是最先执行，<<应该是把任务加入到project的tasks中
//copy编译的class补丁（增量），包含resource目录下文件，对应项目src/main/java和src/main/resources
task copyClassHotFix(dependsOn: 'copyWebHotFix') << {
	println "classFile:$ext.hotFixFiles"
	//hasProperty
	if(!ext.hotFixFiles.empty) {
		copy {
			//class 目录
			from sourceSets.main.output.classesDir
			//resource 目录
			from sourceSets.main.output.resourcesDir
			into "$generateHotFix.ext.outDir/WEB-INF/classes"
			include ext.hotFixFiles
		}
	}
}

//copy编译的webapp补丁（增量），对应项目src/main/webapp
task copyWebHotFix(dependsOn:'createHotFixConfig') << {
	println "webFile:$ext.hotFixFiles"
	if(!ext.hotFixFiles.empty) {
		copy {
			//webApp目录
			from webAppDirName, {	
				exclude '**/classes'
				//exclude '**/lib'
			}
			into generateHotFix.ext.outDir
			include ext.hotFixFiles
		}
	}
}

task sysout << {
	println new Date().format('yyyy-MM-dd HH:mm:ss')
	//println "$project.buildDir/hotFix"
    //println project.sourceSets.main.output.resourcesDir
	//println project.sourceSets.main.output.classesDir	
	//println projectDir	//op:E:\Workspaces\workspace_java\gradle-study\cap\cap-web
    //println webAppDir		//op:E:\Workspaces\workspace_java\gradle-study\cap\cap-web\src\main\webapp
    //println webAppDirName	//op:src/main/webapp
}

//过滤项目并输出对应的源目录
task filterProject << {
	rootProject.subprojects.findAll{it.name !='cap-web'}.each{
		println "$it:"
		it.sourceSets.main.java.srcDirs.each { dir ->
			println " -java dir:$dir"
		}
		it.sourceSets.main.resources.srcDirs.each { dir ->
			println " -resource dir:$dir"
		}
	}
}

task copyTask << {
	def list = []
	list << '/src/main/resources/greeting.txt'
	list << '/src/main/resources/gradleCopy.xml'
	copy {
		from list
		into 'hotFix'
	}
}

task listJars << {
	println '编译环境的jar列表：'
    configurations.compile.each { File file -> println file.name }
    
    println '测试编译环境的jar列表：'
    configurations.testCompile.each { File file -> println file.name }

	println 'classpath的jar列表：'
//    prinlnt configurations
}
